import  random
#轮盘赌算法

def rouletteChoice(solutions,fitness,n):
    """
    通过轮盘赌算法从种群中选择出n个个体。
    :param fitness: 适应值函数
    :param solutions: 群体（适应值与上面一一对应）
    :param n: 需要选择的个题数量，n为偶数
    :return: choosenSolution:选择出的个体集
    :return: choosenIndex:选择出的个体集对应的下标
    :return: choosenFitness:选择出的个体集对应的适应值
    """

    # 计算总适应值
    fitSum = 0.0
    for fit in fitness:
        fitSum += fit

    # 制作轮盘
    roulette = []
    roulette.append(0)
    i = 0
    for fit in fitness:
        roulette.append(fit/fitSum+roulette[i])
        i = i + 1

    #生成随机数，根据轮盘选择个体
    choosenSolution = []
    choosenIndex = []
    chooseFit = []
    for i in range (n):
        x = random.random()
        for i in range(len(roulette)-1):
            if x>roulette[i] and x<roulette[i+1]:
                choosenSolution.append(solutions[i])
                choosenIndex.append(i)
                chooseFit.append(fitness[i])

    return choosenSolution,choosenIndex,chooseFit


if __name__ == '__main__':
    solutions = [[0.7402292320482373, 3.3860097306351116, 0.05430637840951392, 0.5741275120311866], [0.12223767339538229, 0.9480967671598921, 0.5386894859410939, 1.8958149276757221], [2.6834887154990823, 1.2226162181819389, 2.15780861304232, 2.072304606720947], [2.5354189080029084, 0.01694213208570603, 1.4166497579836095, 2.290344025802529], [1.0963904479105724, 1.5984729314901631, 2.5121500960523835, 1.5202472987166078], [1.3409310862126347, 2.327884898370524, 0.017480254042163343, 1.1106504077259063], [2.017652967078765, 1.7820622070069525, 0.4732878154609879, 2.3310207352508208], [1.0805391159839044, 1.7886252992551472, 0.4043145079202515, 0.3262442639594383], [0.06395436807253933, 0.5280815828498558, 2.6197300576286247, 0.8512079866075078], [2.6033269200572042, 0.13952825208469613, 1.2218673872171537, 1.4270159195810554], [0.1562650763400245, 0.3940280595210902, 5.32914069931909, 0.6163652289002325], [1.2083059799246865, 2.149242785192731, 0.031579562066151756, 2.4719025915828654], [0.1793751796061962, 1.6950723047481617, 3.041978103262255, 0.6295112943759031], [0.843533340661118, 2.0056948425977525, 5.092929005713501, 0.6546752711493135], [2.305580211606299, 1.8779239404374912, 3.149943307826297, 0.2821245589261669], [2.6624719381480775, 1.421307455551765, 3.317447929036471, 0.021379445122715696], [4.06008597600537, 0.7604411916566599, 0.20820315108179138, 0.6182483066100684], [3.3541517790185607, 0.5018519530584946, 4.2743098986005075, 0.5400517202349834], [1.8853218917125252, 1.1813243522152945, 0.9637391933007327, 1.5916397142310692], [3.729319253356006, 0.013072716820893292, 0.09590216136261306, 3.0574186558412606], [0.4000117725852227, 1.102767055591507, 2.01927914937074, 0.5410489103819582], [0.847543288855179, 5.064210556081361, 1.4207776517932083, 3.5306749289318486], [1.019095841036674, 0.32642987431626075, 3.0170458725038483, 0.5068541365637016], [0.9788567297408072, 4.85937803597911, 3.6137791278048437, 0.9970384524581413], [0.08571818346766284, 0.11056480216537819, 0.0575642254137074, 0.3202446945523328], [3.0623528501508366, 0.5235957471862135, 3.8594323274592646, 0.8955197100932897], [0.047053898074751806, 0.3389100620182436, 1.0593835124952835, 0.3922142382076039], [1.108753287165532, 0.07909990710487032, 0.7784787744153312, 2.400760638794637], [0.20306801036815017, 3.0661467533192592, 0.6947101100263495, 3.7230224699231353], [0.2594895781464325, 1.2734375827812856, 0.9587505863437535, 1.8670317560534027], [1.5456784266223842, 1.7915224244783605, 0.5890112111821961, 2.41086563065724], [1.4999196454918529, 1.6311093517720214, 1.5336517793980982, 3.1127673664402087]]
    fitness = [0.8026162334499606, 0.7602153088205983, 0.7539207434995059, 0.753234518660833, 0.69610418101689, 0.6080951757671061, 0.5976095078520717, 0.5736078872481194, 0.5657379621315848, 0.5576634321871677, 0.5511376022174038, 0.5238178052825062, 0.5225955060089611, 0.5195165330479443, 0.515543932176816, 0.513492275510005, 0.5100282604312609, 0.5053053496048979, 0.46988544534692595, 0.4695551890558167, 0.4674573001992703, 0.42904163755796204, 0.4289712943454225, 0.42452861735955527, 0.41956688421122557, 0.41837662402830655, 0.40688383040903126, 0.3977964404722949, 0.380611556052906, 0.3779804695742139, 0.3601792954518903, 0.3353176980542527]
    choosenSolution,choosenIndex,chooseFit = rouletteChoice(solutions,fitness,5)

    for i in range(len(chooseFit)):
        print(choosenIndex[i],end=" ")
        print(choosenSolution[i],end=" ")
        print("fitness:",chooseFit[i])
